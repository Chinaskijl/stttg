import { useGameStore } from '@/lib/store';
import { Card } from '@/components/ui/card';
import { Coins, Trees, Wheat, Droplet, Globe } from 'lucide-react';
import { useEffect, useState } from 'react';
import { BUILDINGS } from '@/lib/game';
import { getSatisfactionFactors } from '@/lib/satisfactionHelpers'; // Added import

export function ResourcePanel() {
  const { gameState, cities, resourcesIncome } = useGameStore();
  const [resourceProduction, setResourceProduction] = useState({
    gold: 0,
    wood: 0,
    food: 0,
    oil: 0,
    metal: 0,
    steel: 0,
    weapons: 0,
    influence: 0
  });
  const [foodConsumption, setFoodConsumption] = useState(0);

  useEffect(() => {
    let goldProd = 0;
    let woodProd = 0;
    let foodProd = 0;
    let oilProd = 0;
    let metalProd = 0;
    let steelProd = 0;
    let weaponsProd = 0;
    let foodCons = 0;
    let influenceProd = 0;
    let taxIncome = 0;

    // We'll track building production separately from income in resourcesIncome
    // resourcesIncome comes from server and includes tax income and other special sources

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–π –¥–æ—Ö–æ–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (resourcesIncome && resourcesIncome.gold !== undefined) {
      taxIncome = resourcesIncome.gold;

      // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–æ–≥–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç—É–ª—Ç–∏–ø–µ
      if (Math.abs(taxIncome) > 0.01) {
        goldProd += taxIncome; // –í–∫–ª—é—á–∞–µ–º –Ω–∞–ª–æ–≥–∏ –≤ –æ–±—â—É—é –¥–æ–±—ã—á—É –∑–æ–ª–æ—Ç–∞
      }
    }

    cities.forEach(city => {
      if (city.owner === 'player') {
        city.buildings.forEach(buildingId => {
          const building = BUILDINGS.find(b => b.id === buildingId);
          if (building && building.resourceProduction) {
            // Check for worker availability before calculating production
            const totalWorkers = city.population || 0;
            const requiredWorkers = (building.workers || 0);
            const allocatedWorkers = Math.min(requiredWorkers, totalWorkers);
            const hasWorkers = requiredWorkers > 0 ? allocatedWorkers > 0 : true;
            const efficiency = requiredWorkers > 0 ? (allocatedWorkers / requiredWorkers) * 100 : 100;
            const { type, amount } = building.resourceProduction;

            // –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            let adjustedAmount = 0;

            if (hasWorkers) {
              // –î–ª—è —Ñ–µ—Ä–º—ã —É—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö
              if (building.id === 'farm') {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö
                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è —Ñ–µ—Ä–º—ã = 10 (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
                const workerRatio = Math.min(totalWorkers / 10, 1);
                adjustedAmount = amount * workerRatio;
              } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–¥–∞–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–∏—Ö
                adjustedAmount = amount;
              }
            }

            switch (type) {
              case 'gold':
                goldProd += adjustedAmount;
                break;
              case 'wood':
                woodProd += adjustedAmount;
                break;
              case 'food':
                foodProd += adjustedAmount;
                break;
              case 'oil':
                oilProd += adjustedAmount;
                break;
              case 'metal':
                metalProd += adjustedAmount;
                break;
              case 'steel':
                steelProd += adjustedAmount;
                break;
              case 'weapons':
                weaponsProd += adjustedAmount;
                break;
              case 'influence':
                influenceProd += adjustedAmount;
                break;
            }
          }
        });
        foodCons += city.population * 0.1;
      }
    });

    setResourceProduction({
      gold: goldProd + (resourcesIncome?.gold || 0),
      wood: woodProd,
      food: foodProd,
      oil: oilProd,
      metal: metalProd,
      steel: steelProd,
      weapons: weaponsProd,
      influence: influenceProd
    });

    setFoodConsumption(foodCons);
  }, [cities, gameState, resourcesIncome]);

  const resources = [
    { icon: <span className="w-5 h-5 flex items-center justify-center">üí∞</span>, value: Math.floor(gameState.resources.gold), name: 'Gold', production: resourceProduction.gold, key: 'gold' },
    { icon: <span className="w-5 h-5 flex items-center justify-center">üå≤</span>, value: Math.floor(gameState.resources.wood), name: 'Wood', production: resourceProduction.wood, key: 'wood' },
    { icon: <span className="w-5 h-5 flex items-center justify-center">üåæ</span>, value: Math.floor(gameState.resources.food), name: 'Food', production: resourceProduction.food, consumption: foodConsumption, netProduction: resourceProduction.food - foodConsumption, key: 'food' },
    { icon: <span className="w-5 h-5 flex items-center justify-center">üíß</span>, value: Math.floor(gameState.resources.oil), name: 'Oil', production: resourceProduction.oil, key: 'oil' },
    { icon: <span className="w-5 h-5 flex items-center justify-center">‚öôÔ∏è</span>, value: Math.floor(gameState.resources.metal), name: 'Metal', production: resourceProduction.metal, key: 'metal' },
    { icon: <span className="w-5 h-5 flex items-center justify-center">üî©</span>, value: Math.floor(gameState.resources.steel), name: 'Steel', production: resourceProduction.steel, key: 'steel' },
    { icon: <span className="w-5 h-5 flex items-center justify-center">üî´</span>, value: Math.floor(gameState.resources.weapons), name: 'Weapons', production: resourceProduction.weapons, key: 'weapons' },
    { icon: <Globe className="w-5 h-5" />, value: Math.floor(gameState.resources.influence || 0), name: 'Influence', production: resourceProduction.influence, key: 'influence' }
  ];

  const getProductionColor = (production) => (production >= 0 ? 'text-green-500' : 'text-red-500');
  const formatProduction = (production) => `${production >= 0 ? '+' : ''}${Math.round(production * 10) / 10}`;

  const renderTooltipContent = (resourceKey) => {
    let tooltipContent = <p>No data available.</p>;
    if (resourceKey === 'food') {
      tooltipContent = <>
        <p>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: +{resourceProduction.food.toFixed(1)}</p>
        <p>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: -{foodConsumption.toFixed(1)}</p>
        <p>–ò—Ç–æ–≥–æ: {(resourceProduction.food - foodConsumption).toFixed(1)}</p>
      </>;
    }
    return tooltipContent;
  };


  // Function to generate tooltip content
  const generateTooltip = (resourceType: string) => {
    const tooltipItems = [];

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞
    const checkWorkersAvailability = (city: any) => {
      const totalBuildingsCount = city.buildings?.length || 0;
      const availableWorkers = (city.population || 0) - totalBuildingsCount;
      const hasWorkers = availableWorkers >= 0;
      return {
        hasWorkers,
        availableWorkers,
        totalBuildingsCount
      };
    };

    // Add tax income for gold
    if (resourceType === 'gold') {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç –Ω–∞–ª–æ–≥–æ–≤
      const taxIncome = cities.reduce((sum, city) => {
        if (city.owner === 'player') {
          const taxRate = city.taxRate || 0.1; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
          return sum + ((city.population * taxRate) / 5);
        }
        return sum;
      }, 0);

      tooltipItems.push(
        <div key="taxes" className="whitespace-nowrap">
          –ù–∞–ª–æ–≥–∏: <span className={getProductionColor(taxIncome)}>
            {formatProduction(taxIncome)}/—Å
          </span>
          {cities.filter(c => c.owner === 'player').map(city => {
            const { hasWorkers } = checkWorkersAvailability(city);
            return (
              <div key={`tax-${city.id}`} className="text-xs ml-4">
                {city.name}: 
                <span className={hasWorkers ? "text-green-500" : "text-yellow-500"}>
                  +{((city.population * city.taxRate) / 5).toFixed(1)}/—Å
                </span>
                {!hasWorkers && <span className="text-yellow-500"> (–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–∞–±–æ—á–∏—Ö)</span>}
              </div>
            );
          })}
        </div>
      );
    }

    // Add influence production sources
    if (resourceType === 'influence' && resourcesIncome?.influence) {
      tooltipItems.push(
        <div key="influence-base" className="whitespace-nowrap">
          –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: <span className={getProductionColor(resourcesIncome.influence)}>
            {formatProduction(resourcesIncome.influence)}/—Å
          </span>
          {cities.filter(c => c.owner === 'player').map(city => (
            <div key={`influence-${city.id}`} className="text-xs ml-4">
              {city.name}: <span className="text-green-500">
                +{(city.population * 0.1).toFixed(1)}/—Å
                {city.satisfaction && city.satisfaction > 70 ? 
                  ` +${((city.satisfaction - 70) * 0.05).toFixed(1)}/—Å (–±–æ–Ω—É—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)` : 
                  ''}
              </span>
            </div>
          ))}
        </div>
      );
    }

    // Group buildings by type and city, and calculate total production
    const buildingProduction = {};

    cities.forEach(city => {
      if (city.owner === 'player') {
        // Count buildings by type in each city
        const cityBuildingCounts = {};

        city.buildings.forEach(buildingId => {
          const building = BUILDINGS.find(b => b.id === buildingId);
          if (building && building.resourceProduction && building.resourceProduction.type === resourceType) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–∏—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∑–¥–∞–Ω–∏—è
            const requiredWorkers = building.workers || 0;
            const allocatedWorkers = Math.min(requiredWorkers, city.population || 0);
            const hasWorkers = requiredWorkers > 0 ? allocatedWorkers > 0 : true;
            const efficiency = requiredWorkers > 0 ? (allocatedWorkers / requiredWorkers) * 100 : 100;

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏ –≤ —Ç—É–ª—Ç–∏–ø —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–±–æ—á–∏—Ö
            buildingProduction[city.name] = buildingProduction[city.name] || [];
            buildingProduction[city.name].push({
              buildingName: building.name,
              production: building.resourceProduction.amount,
              requiredWorkers,
              allocatedWorkers,
              efficiency,
              hasWorkers
            });
          }
        });

        // Add entries for each building type in the city
        tooltipItems.push(
          <div key={`tooltip-city-${city.id}`} className="mt-1">
            <div className="font-semibold">{city.name}:</div>
            {Object.entries(buildingProduction[city.name] || []).map(([buildingId, info]: [string, any]) => {
              const actualProduction = info.hasWorkers ? info.production : 0;
              return (
                <div key={`${city.id}-${buildingId}`} className="ml-2">
                  {info.buildingName} : <span className={getProductionColor(actualProduction)}>
                    {info.hasWorkers ? `+${(info.production).toFixed(1)}/—Å (${info.allocatedWorkers}/${info.requiredWorkers}, ${info.efficiency.toFixed(0)}%)` : '+0.0/—Å (–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö)'}
                  </span>
                </div>
              );
            })}
          </div>
        );
      }
    });

    // Add consumption for food
    if (resourceType === 'food' && gameState.population > 0) {
      tooltipItems.push(
        <div key="food-consumption" className="whitespace-nowrap">
          Population: <span className="text-red-500">-{(gameState.population * 0.1).toFixed(1)}/s</span>
        </div>
      );
    }

    return tooltipItems.length ? (
      <div className="absolute top-full left-0 bg-black/80 text-white p-2 rounded text-xs z-50">
        {tooltipItems}
      </div>
    ) : null;
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 250–º—Å –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    const interval = setInterval(() => {
      let goldProd = 0;
      let woodProd = 0;
      let foodProd = 0;
      let oilProd = 0;
      let metalProd = 0;
      let steelProd = 0;
      let weaponsProd = 0;
      let foodCons = 0;
      let influenceProd = 0;
      let taxIncome = 0;


      if (resourcesIncome && resourcesIncome.gold) {
        taxIncome = resourcesIncome.gold;
      }

      cities.forEach(city => {
        if (city.owner === 'player') {
          city.buildings.forEach(buildingId => {
            const building = BUILDINGS.find(b => b.id === buildingId);
            if (building && building.resourceProduction) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–∏—Ö –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
              const totalWorkers = city.population || 0;
              const requiredWorkers = (building.workers || 0);
              const allocatedWorkers = Math.min(requiredWorkers, totalWorkers);
              const hasWorkers = requiredWorkers > 0 ? allocatedWorkers > 0 : true;
              const { type, amount } = building.resourceProduction;

              // –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
              let adjustedAmount = 0;

              if (hasWorkers) {
                // –î–ª—è —Ñ–µ—Ä–º—ã —É—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö
                if (building.id === 'farm') {
                  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö
                  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è —Ñ–µ—Ä–º—ã = 10 (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
                  const workerRatio = Math.min(totalWorkers / 10, 1);
                  adjustedAmount = amount * workerRatio;
                } else {
                  // –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–¥–∞–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–∏—Ö
                  adjustedAmount = amount;
                }
              }

              switch (type) {
                case 'gold':
                  goldProd += adjustedAmount;
                  break;
                case 'wood':
                  woodProd += adjustedAmount;
                  break;
                case 'food':
                  foodProd += adjustedAmount;
                  break;
                case 'oil':
                  oilProd += adjustedAmount;
                  break;
                case 'metal':
                  metalProd += adjustedAmount;
                  break;
                case 'steel':
                  steelProd += adjustedAmount;
                  break;
                case 'weapons':
                  weaponsProd += adjustedAmount;
                  break;
                case 'influence':
                  influenceProd += adjustedAmount;
                  break;
              }
            }
          });
          foodCons += city.population * 0.1;
        }
      });

      setResourceProduction({
        gold: goldProd, // –¢–µ–ø–µ—Ä—å –Ω–∞–ª–æ–≥–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ goldProd –≤—ã—à–µ
        wood: woodProd,
        food: foodProd,
        oil: oilProd,
        metal: metalProd,
        steel: steelProd,
        weapons: weaponsProd,
        influence: influenceProd
      });

      setFoodConsumption(foodCons);
    }, 50); // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    return () => clearInterval(interval);
  }, [cities, gameState, resourcesIncome]);

  return (
    <Card className="fixed top-4 left-4 p-4 z-[1000]">
      <div className="flex flex-wrap gap-4">
        {resources.map((resource) => {
          // –î–ª—è –µ–¥—ã –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          let totalProduction;
          if (resource.key === 'food') {
            // –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –µ–¥—ã (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–∏–Ω—É—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
            totalProduction = resource.production - resource.consumption;
          } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ - –±–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–ª—é—Å –¥–æ—Ö–æ–¥ –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            totalProduction = resource.production + (
              resourcesIncome && resourcesIncome[resource.key] ? resourcesIncome[resource.key] : 0
            );
          }

          return (
            <div key={resource.name} className="flex items-center gap-2 relative group">
              {resource.icon}
              <span className="font-medium">
                {resource.value}
                <span className={`ml-1 text-xs ${getProductionColor(totalProduction)}`}>
                  ({formatProduction(totalProduction)})
                </span>
              </span>

              {/* Tooltip that appears on hover */}
              <div className="hidden group-hover:block absolute bg-black bg-opacity-80 text-white p-2 rounded z-50 left-full ml-2 whitespace-nowrap">
                {generateTooltip(resource.key)}
              </div>
            </div>
          );
        })}
        <div className="border-l pl-4">
          <div className="flex items-center gap-2">
            <span>üë•</span>
            <span className="font-medium">
              {Math.floor(gameState.population)}
              {gameState.resources.food <= 0 ? <span className="ml-1 text-xs text-red-500">(-1)</span> : ''}
            </span>
          </div>
        </div>

        {cities.filter(city => city.owner === 'player').map(city => (
          <div key={`satisfaction-${city.id}`} className="border-l pl-4 relative group">
            <div className="flex items-center gap-2">
              <span>{city.satisfaction >= 70 ? 'üòÉ' : city.satisfaction >= 30 ? 'üòê' : 'üò†'}</span>
              <span className="font-medium">
                {city.name.split(' ')[0]}: {Math.floor(city.satisfaction || 0)}%
                {city.protestTimer ? <span className="ml-1 text-xs text-red-500">(‚ö†Ô∏è {Math.floor(city.protestTimer)}s)</span> : ''}
              </span>
            </div>

            {/* –¢—É–ª—Ç–∏–ø –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ */}
            <div className="hidden group-hover:block absolute top-full left-0 bg-black/80 text-white p-2 rounded text-xs z-50 w-64">
              <div className="font-bold mb-1">–§–∞–∫—Ç–æ—Ä—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:</div>
              {getSatisfactionFactors(city).map((factor, idx) => (
                <div key={`factor-${idx}`} className="flex justify-between items-center my-1">
                  <span>{factor.name}:</span>
                  <span className={`${factor.isPositive ? 'text-green-400' : factor.isWarning ? 'text-yellow-400' : 'text-red-400'}`}>
                    {factor.impact}
                  </span>
                </div>
              ))}
              {getSatisfactionFactors(city).length === 0 && (
                <div className="text-gray-300">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤</div>
              )}
            </div>
          </div>
        ))}
        <div className="border-l pl-4">
          <div className="flex items-center gap-2">
            <span>‚öîÔ∏è</span>
            <span className="font-medium">{Math.floor(gameState.military)}</span>
          </div>
        </div>
      </div>
    </Card>
  );
}

export function getResourceIcon(type: string): string {
  const icons: { [key: string]: string } = {
    food: 'üçû',
    gold: 'üí∞',
    wood: 'ü™µ',
    oil: 'üõ¢Ô∏è',
    influence: 'üåê',
    weapons: 'üî´',
    metal: 'üîß',
    steel: '‚öíÔ∏è'
  };
  return icons[type] || '‚ùì';
}